/*
 * httpbin.org
 * A simple HTTP Request & Response Service.<br/> <br/> <b>Run locally: </b> <code>$ docker run -p 80:80 kennethreitz/httpbin</code>
 *
 * OpenAPI spec version: 0.9.2
 * Contact: me@kennethreitz.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://github.com/OpenAPITools/openapi-generator
 *
 * OpenAPI generator version: 5.3.0-SNAPSHOT
 */


import http from "k6/http";
import { group, check, sleep } from "k6";

const BASE_URL = "https://httpbin.org/";
// Sleep duration between successive requests.
// You might want to edit the value of this variable or remove calls to the sleep function on the script.
const SLEEP_DURATION = 0.1;
// Global variables should be initialized.
let authorization = "TODO_EDIT_THE_AUTHORIZATION";
let ifModifiedSince = "TODO_EDIT_THE_IF-MODIFIED-SINCE";
let ifNoneMatch = "TODO_EDIT_THE_IF-NONE-MATCH";
let ifMatch = "TODO_EDIT_THE_IF-MATCH";

export default function() {
    group("/absolute-redirect/{n}", () => {
        let n = 'TODO_EDIT_THE_N'; // specify value as there is no example value for this parameter in OpenAPI spec
        let url = BASE_URL + `/absolute-redirect/${n}`;
        // Request No. 1
        let request = http.get(url);
        sleep(SLEEP_DURATION);
    });
    group("/anything", () => {
        let url = BASE_URL + `/anything`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Anything passed in request": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);

        // Request No. 2
        request = http.put(url);
        check(request, {
            "Anything passed in request": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);

        // Request No. 3
        request = http.post(url);
        check(request, {
            "Anything passed in request": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);

        // Request No. 4
        request = http.del(url);
        check(request, {
            "Anything passed in request": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);

        // Request No. 5
        request = http.patch(url);
        check(request, {
            "Anything passed in request": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/anything/{anything}", () => {
        let url = BASE_URL + `/anything/${anything}`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Anything passed in request": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);

        // Request No. 2
        request = http.put(url);
        check(request, {
            "Anything passed in request": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);

        // Request No. 3
        request = http.post(url);
        check(request, {
            "Anything passed in request": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);

        // Request No. 4
        request = http.del(url);
        check(request, {
            "Anything passed in request": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);

        // Request No. 5
        request = http.patch(url);
        check(request, {
            "Anything passed in request": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/base64/{value}", () => {
        let value = 'TODO_EDIT_THE_VALUE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let url = BASE_URL + `/base64/${value}`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Decoded base64 content.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/basic-auth/{user}/{passwd}", () => {
        let passwd = 'TODO_EDIT_THE_PASSWD'; // specify value as there is no example value for this parameter in OpenAPI spec
        let user = 'TODO_EDIT_THE_USER'; // specify value as there is no example value for this parameter in OpenAPI spec
        let url = BASE_URL + `/basic-auth/${user}/${passwd}`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Sucessful authentication.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/bearer", () => {
        let url = BASE_URL + `/bearer`;
        // Request No. 1
        let params = {headers: {"Authorization": `${authorization}`, "Accept": "application/json"}};
        let request = http.get(url, params);
        check(request, {
            "Sucessful authentication.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/brotli", () => {
        let url = BASE_URL + `/brotli`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Brotli-encoded data.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/bytes/{n}", () => {
        let n = 'TODO_EDIT_THE_N'; // specify value as there is no example value for this parameter in OpenAPI spec
        let url = BASE_URL + `/bytes/${n}`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Bytes.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/cache", () => {
        let url = BASE_URL + `/cache`;
        // Request No. 1
        let params = {headers: {"If-Modified-Since": `${ifModifiedSince}`, "If-None-Match": `${ifNoneMatch}`, "Accept": "application/json"}};
        let request = http.get(url, params);
        check(request, {
            "Cached response": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/cache/{value}", () => {
        let value = 'TODO_EDIT_THE_VALUE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let url = BASE_URL + `/cache/${value}`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Cache control set": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/cookies", () => {
        let url = BASE_URL + `/cookies`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Set cookies.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/cookies/delete", () => {
        let freeform = 'TODO_EDIT_THE_FREEFORM'; // specify value as there is no example value for this parameter in OpenAPI spec
        let url = BASE_URL + `/cookies/delete?freeform=${freeform}`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Redirect to cookie list": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/cookies/set", () => {
        let freeform = 'TODO_EDIT_THE_FREEFORM'; // specify value as there is no example value for this parameter in OpenAPI spec
        let url = BASE_URL + `/cookies/set?freeform=${freeform}`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Redirect to cookie list": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/cookies/set/{name}/{value}", () => {
        let name = 'TODO_EDIT_THE_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec
        let value = 'TODO_EDIT_THE_VALUE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let url = BASE_URL + `/cookies/set/${name}/${value}`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Set cookies and redirects to cookie list.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/deflate", () => {
        let url = BASE_URL + `/deflate`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Defalte-encoded data.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/delay/{delay}", () => {
        let delay = 'TODO_EDIT_THE_DELAY'; // specify value as there is no example value for this parameter in OpenAPI spec
        let url = BASE_URL + `/delay/${delay}`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "A delayed response.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);

        // Request No. 2
        request = http.put(url);
        check(request, {
            "A delayed response.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);

        // Request No. 3
        request = http.post(url);
        check(request, {
            "A delayed response.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);

        // Request No. 4
        request = http.del(url);
        check(request, {
            "A delayed response.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);

        // Request No. 5
        request = http.patch(url);
        check(request, {
            "A delayed response.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/delete", () => {
        let url = BASE_URL + `/delete`;
        // Request No. 1
        let request = http.del(url);
        check(request, {
            "The request's DELETE parameters.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/deny", () => {
        let url = BASE_URL + `/deny`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Denied message": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/digest-auth/{qop}/{user}/{passwd}", () => {
        let qop = 'TODO_EDIT_THE_QOP'; // specify value as there is no example value for this parameter in OpenAPI spec
        let passwd = 'TODO_EDIT_THE_PASSWD'; // specify value as there is no example value for this parameter in OpenAPI spec
        let user = 'TODO_EDIT_THE_USER'; // specify value as there is no example value for this parameter in OpenAPI spec
        let url = BASE_URL + `/digest-auth/${qop}/${user}/${passwd}`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Sucessful authentication.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/digest-auth/{qop}/{user}/{passwd}/{algorithm}", () => {
        let qop = 'TODO_EDIT_THE_QOP'; // specify value as there is no example value for this parameter in OpenAPI spec
        let passwd = 'TODO_EDIT_THE_PASSWD'; // specify value as there is no example value for this parameter in OpenAPI spec
        let user = 'TODO_EDIT_THE_USER'; // specify value as there is no example value for this parameter in OpenAPI spec
        let algorithm = 'TODO_EDIT_THE_ALGORITHM'; // specify value as there is no example value for this parameter in OpenAPI spec
        let url = BASE_URL + `/digest-auth/${qop}/${user}/${passwd}/${algorithm}`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Sucessful authentication.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/digest-auth/{qop}/{user}/{passwd}/{algorithm}/{stale_after}", () => {
        let qop = 'TODO_EDIT_THE_QOP'; // specify value as there is no example value for this parameter in OpenAPI spec
        let staleAfter = 'TODO_EDIT_THE_STALE_AFTER'; // specify value as there is no example value for this parameter in OpenAPI spec
        let passwd = 'TODO_EDIT_THE_PASSWD'; // specify value as there is no example value for this parameter in OpenAPI spec
        let user = 'TODO_EDIT_THE_USER'; // specify value as there is no example value for this parameter in OpenAPI spec
        let algorithm = 'TODO_EDIT_THE_ALGORITHM'; // specify value as there is no example value for this parameter in OpenAPI spec
        let url = BASE_URL + `/digest-auth/${qop}/${user}/${passwd}/${algorithm}/${stale_after}`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Sucessful authentication.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/drip", () => {
        let duration = 'TODO_EDIT_THE_DURATION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let code = 'TODO_EDIT_THE_CODE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let delay = 'TODO_EDIT_THE_DELAY'; // specify value as there is no example value for this parameter in OpenAPI spec
        let numbytes = 'TODO_EDIT_THE_NUMBYTES'; // specify value as there is no example value for this parameter in OpenAPI spec
        let url = BASE_URL + `/drip?duration=${duration}&numbytes=${numbytes}&code=${code}&delay=${delay}`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "A dripped response.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/encoding/utf8", () => {
        let url = BASE_URL + `/encoding/utf8`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Encoded UTF-8 content.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/etag/{etag}", () => {
        let url = BASE_URL + `/etag/${etag}`;
        // Request No. 1
        let params = {headers: {"If-None-Match": `${ifNoneMatch}`, "If-Match": `${ifMatch}`, "Accept": "application/json"}};
        let request = http.get(url, params);
        check(request, {
            "Normal response": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/get", () => {
        let url = BASE_URL + `/get`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "The request's query parameters.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/gzip", () => {
        let url = BASE_URL + `/gzip`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "GZip-encoded data.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/headers", () => {
        let url = BASE_URL + `/headers`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "The request's headers.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/hidden-basic-auth/{user}/{passwd}", () => {
        let passwd = 'TODO_EDIT_THE_PASSWD'; // specify value as there is no example value for this parameter in OpenAPI spec
        let user = 'TODO_EDIT_THE_USER'; // specify value as there is no example value for this parameter in OpenAPI spec
        let url = BASE_URL + `/hidden-basic-auth/${user}/${passwd}`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Sucessful authentication.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/html", () => {
        let url = BASE_URL + `/html`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "An HTML page.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/image", () => {
        let url = BASE_URL + `/image`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "An image.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/image/jpeg", () => {
        let url = BASE_URL + `/image/jpeg`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "A JPEG image.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/image/png", () => {
        let url = BASE_URL + `/image/png`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "A PNG image.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/image/svg", () => {
        let url = BASE_URL + `/image/svg`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "An SVG image.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/image/webp", () => {
        let url = BASE_URL + `/image/webp`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "A WEBP image.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/ip", () => {
        let url = BASE_URL + `/ip`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "The Requester's IP Address.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/json", () => {
        let url = BASE_URL + `/json`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "An JSON document.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/links/{n}/{offset}", () => {
        let offset = 'TODO_EDIT_THE_OFFSET'; // specify value as there is no example value for this parameter in OpenAPI spec
        let n = 'TODO_EDIT_THE_N'; // specify value as there is no example value for this parameter in OpenAPI spec
        let url = BASE_URL + `/links/${n}/${offset}`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "HTML links.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/patch", () => {
        let url = BASE_URL + `/patch`;
        // Request No. 1
        let request = http.patch(url);
        check(request, {
            "The request's PATCH parameters.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/post", () => {
        let url = BASE_URL + `/post`;
        // Request No. 1
        let request = http.post(url);
        check(request, {
            "The request's POST parameters.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/put", () => {
        let url = BASE_URL + `/put`;
        // Request No. 1
        let request = http.put(url);
        check(request, {
            "The request's PUT parameters.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/range/{numbytes}", () => {
        let numbytes = 'TODO_EDIT_THE_NUMBYTES'; // specify value as there is no example value for this parameter in OpenAPI spec
        let url = BASE_URL + `/range/${numbytes}`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Bytes.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/redirect-to", () => {
        let url = 'TODO_EDIT_THE_URL'; // specify value as there is no example value for this parameter in OpenAPI spec
        let statusCode = 'TODO_EDIT_THE_STATUS_CODE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let url = BASE_URL + `/redirect-to?url=${url}&status_code=${status_code}`;
        // Request No. 1
        let request = http.get(url);
        sleep(SLEEP_DURATION);

        // Request No. 2
        // TODO: edit the parameters of the request body.
        body = {"url": "string", "statusCode": "oas_any_type_not_mapped"};
        params = {headers: {"Content-Type": "multipart/form-data"}};
        request = http.put(url, body, params);
        sleep(SLEEP_DURATION);

        // Request No. 3
        // TODO: edit the parameters of the request body.
        body = {"url": "string", "statusCode": "oas_any_type_not_mapped"};
        params = {headers: {"Content-Type": "multipart/form-data"}};
        request = http.post(url, body, params);
        sleep(SLEEP_DURATION);

        // Request No. 4
        request = http.del(url);
        sleep(SLEEP_DURATION);

        // Request No. 5
        request = http.patch(url);
        sleep(SLEEP_DURATION);
    });
    group("/redirect/{n}", () => {
        let n = 'TODO_EDIT_THE_N'; // specify value as there is no example value for this parameter in OpenAPI spec
        let url = BASE_URL + `/redirect/${n}`;
        // Request No. 1
        let request = http.get(url);
        sleep(SLEEP_DURATION);
    });
    group("/relative-redirect/{n}", () => {
        let n = 'TODO_EDIT_THE_N'; // specify value as there is no example value for this parameter in OpenAPI spec
        let url = BASE_URL + `/relative-redirect/${n}`;
        // Request No. 1
        let request = http.get(url);
        sleep(SLEEP_DURATION);
    });
    group("/response-headers", () => {
        let freeform = 'TODO_EDIT_THE_FREEFORM'; // specify value as there is no example value for this parameter in OpenAPI spec
        let url = BASE_URL + `/response-headers?freeform=${freeform}`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Response headers": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);

        // Request No. 2
        request = http.post(url);
        check(request, {
            "Response headers": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/robots.txt", () => {
        let url = BASE_URL + `/robots.txt`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Robots file": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/status/{codes}", () => {
        let codes = 'TODO_EDIT_THE_CODES'; // specify value as there is no example value for this parameter in OpenAPI spec
        let url = BASE_URL + `/status/${codes}`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Success": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);

        // Request No. 2
        request = http.put(url);
        check(request, {
            "Success": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);

        // Request No. 3
        request = http.post(url);
        check(request, {
            "Success": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);

        // Request No. 4
        request = http.del(url);
        check(request, {
            "Success": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);

        // Request No. 5
        request = http.patch(url);
        check(request, {
            "Success": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/stream-bytes/{n}", () => {
        let n = 'TODO_EDIT_THE_N'; // specify value as there is no example value for this parameter in OpenAPI spec
        let url = BASE_URL + `/stream-bytes/${n}`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Bytes.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/stream/{n}", () => {
        let n = 'TODO_EDIT_THE_N'; // specify value as there is no example value for this parameter in OpenAPI spec
        let url = BASE_URL + `/stream/${n}`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Streamed JSON responses.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/user-agent", () => {
        let url = BASE_URL + `/user-agent`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "The request's User-Agent header.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/uuid", () => {
        let url = BASE_URL + `/uuid`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "A UUID4.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/xml", () => {
        let url = BASE_URL + `/xml`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "An XML document.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
}
